datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

enum Role {
    ADMIN
    USER
}

model Artist {
    id          String   @id @default(uuid())
    name        String   @unique @db.VarChar(255)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    dob         DateTime
    description Json?
    albums      Album[]
}

model Album {
    id          String    @id @default(uuid())
    title       String    @unique @db.VarChar(255)
    artists     Artist[]
    releaseDate DateTime
    cover       String?
    genre       Json?
    tracks      Track[]
    points      Int?
    comments    Comment[]
    label       String?   @db.VarChar(255)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

// Next Auth Prisma Adapter Model
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String    @id @default(uuid())
    album     Album     @relation(fields: [albumId], references: [id])
    albumId   String
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    body      Json
    createdAt DateTime
    updatedAt DateTime
    Children  Comment[] @relation("comment_children")
    parent    Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  String?
}

model Track {
    album   Album  @relation(fields: [albumId], references: [id])
    albumId String
    title   String

    @@id([albumId])
}
