datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

enum Role {
    ADMIN
    USER
}

enum Contributor {
    MIXING
    MASTERING
    PRODUCTION
    RECORDING
}

model Artist {
    id          String             @id @default(uuid())
    name        String             @unique @db.VarChar(255)
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    dob         DateTime
    description Json?
    albums      ArtistsAndAlbums[]
}

model Album {
    id           String             @id @default(uuid())
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    title        String             @unique @db.VarChar(255)
    releaseDate  DateTime
    recordLabel  String             @db.VarChar(255)
    contributors Json?
    artists      ArtistsAndAlbums[]
    albumCover   String
}

model ArtistsAndAlbums {
    album    Album  @relation(fields: [albumId], references: [id])
    albumId  String
    Artist   Artist @relation(fields: [artistId], references: [id])
    artistId String

    @@id([albumId, artistId])
}

// Next Auth Prisma Adapter Model
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
